package com.mycompany.bowl.analizadores;

import java_cup.runtime.*;
import com.mycompany.bowl.backend.lenguaje.*;
import com.mycompany.bowl.backend.lenguaje.lexico.nodos.*;

class SintaxisLenguajes;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        System.out.println("letra: "+s.value +"  linea: "+(s.right+1) +"  columna: "+(s.left+1) +  " Simbolo: "+s.sym);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("letra: "+s.value +"  linea: "+(s.right+1) +"  columna: "+(s.left+1) + " Simbolo: "+s.sym);
    }

    public Symbol getS(){
        System.out.println(this.s);
        return this.s;
    }
:};


terminal String or, version, autor, lanzamiento, extension, term, no, result;
terminal String llavea, llavec, y, pord, coma, igual, corchetea, corchetec, parentesisa, parentesisc;
terminal String mas, mult, menos, div, percent, puntocoma, dosp, lin, tab, esp, comilla, pre, punto;
terminal String codigo, nom, pp, dpp, printf, str;
terminal String number, idt, id, idn, caracterma, caracterme;

non terminal Lenguaje S;
non terminal InfoLenguaje INFO, INFOP;
non terminal String VR, NOM, ID, IDT, IDN, COD, CODP, NUMBER;
non terminal Integer NUMBERN;
non terminal EXP, EXPP, TER, T, O;
non terminal TPT, TPN, N, PROD, PRODP, PR, TE, NO, SEM, RES, OP, OPP;
non terminal Nodo REG, REGP, REGPP, RC, RCP;

start with S;

S ::= INFO:e1 pp COD:e2 pp EXP pp TER PROD {:Lenguaje lenguaje = new Lenguaje(); lenguaje.setInfo(e1); lenguaje.realizarCodigo(e2); RESULT = lenguaje;:}
;

INFO ::= INFO:e1 INFOP:e2 {:e1.ingresarDato(e2); RESULT = e1;:}
    | INFOP:e1 {:RESULT = e1;:}
;

INFOP ::= nom dosp NOM:e1 puntocoma {:System.out.println(e1); InfoLenguaje info = new InfoLenguaje(); info.setNombre(e1);RESULT = info;:}
    | version dosp VR:e1 puntocoma {:InfoLenguaje info = new InfoLenguaje(); info.setVersion(e1); RESULT = info;:}
    | autor dosp NOM:e1 puntocoma {:InfoLenguaje info = new InfoLenguaje(); info.setAutor(e1); RESULT = info;:}
    | lanzamiento dosp number:e1 puntocoma {:InfoLenguaje info = new InfoLenguaje(); info.setLanzamiento(Integer.parseInt(e1)); RESULT = info;:}
    | extension dosp idt:e1 puntocoma {:InfoLenguaje info = new InfoLenguaje(); info.setExtension(e1); RESULT = info;:}
;

VR ::= number:e1 {:RESULT = e1;:}
    | number:e1 punto VR:e2 {:RESULT = e1+e2;:}
;

EXP ::= EXP EXPP
    | EXPP
;

EXPP ::= ID igual REG puntocoma
    | y igual REG puntocoma
;

REG ::= REG:e1 or REGP:e2 {:RESULT = new NodoDisyuncion(e1, e2);:}
    | REGP:e1 {:RESULT = e1;:}
;

REGP ::= REGP:e1 pre {:RESULT = new NodoMas(e1);:}
    | REGP:e1 mas {:RESULT = new NodoMas(e1);:}
    | REGP:e1 mult {:RESULT = new NodoAsterisco(e1);:}
    | REGP:e1 REGPP:e2 {:RESULT = new NodoConcat(e1, e2);:}
    | REGPP:e1 {:RESULT = e1;:}
;

REGPP ::= str:e1 {:RESULT = Nodo.hacerNodos(e1);:}
    | parentesisa REG:e1 parentesisc {:RESULT = e1;:}
    | corchetea RC:e1 corchetec {:RESULT = e1;:}
    | punto {:char c1 = 0, c2 = 250; new NodoTerminal(c1, c2);:}
;

RC ::= RC:e1 RCP:e2 {:RESULT = new NodoDisyuncion(e1, e2);:}
    | RCP:e1 {:RESULT = e1;:}
;

RCP ::= lin {:char c1 = 10; RESULT = new NodoTerminal(c1);:}
    | tab {:char c1 = 9; RESULT = new NodoTerminal(c1);:}
    | esp {:char c1 = 32; RESULT = new NodoTerminal(c1);:}
    | number:e1 menos number:e2 {:RESULT = new NodoTerminal(e1, e2);:}
    | caracterma:e1 menos caracterma:e2 {:RESULT = new NodoTerminal(e1, e2);:}
    | caracterme:e1 menos caracterme:e2 {:RESULT = new NodoTerminal(e1, e2);:}
;

TER ::= TER N
    | TER T
    | N
    | T
;

T ::= term IDT TPT
;

TPT ::= coma IDT TPT
    | puntocoma
;

N ::= no term IDN TPN
;

TPN ::= coma IDN TPN
    | puntocoma
;

PROD ::= PROD PRODP
    | PRODP
;

PRODP ::= IDN dpp PR
;

PR ::= TE PR
    | NO PR
    | SEM puntocoma
    | puntocoma
;

TE ::= IDT dosp ID
    | IDT
;

NO ::= IDN
    | IDN dosp ID
;

SEM ::= llavea RES llavec
;

RES ::= result igual OP puntocoma
    | printf parentesisa str coma OP parentesisc puntocoma
;

OP ::= OP mas OPP
    | OP menos OPP
    | OPP
;

OPP ::= OPP mult O
    | OPP div O
    | O
;

O ::= NUMBERN
    | parentesisa OP parentesisc
    | ID
;

ID ::= id:e1 {:RESULT = e1;:}
    | idt:e1 {:RESULT = e1;:}
    | idn:e1 {:RESULT = e1;:}
;

IDT ::= idt:e1 {:RESULT = e1;:}
    | caracterme:e1 {:RESULT = e1;:}
;

IDN ::= idn:e1 {:RESULT = e1;:}
    | caracterma:e1 {:RESULT = e1;:}
;


NOM ::= NOM:e1 ID:e2 {:RESULT = e1 + " " + e2;:}
    | ID:e1 {:RESULT = e1;:}
;

COD ::= COD:e1 CODP:e2 {:RESULT = e1 + e2;:}
    | CODP:e1 {:RESULT = e1;:}
;

CODP ::= or:e1 {:RESULT = e1;:}| nom:e1 {:RESULT = e1;:}| version:e1 {:RESULT = e1;:}
    | autor:e1 {:RESULT = e1;:}| lanzamiento:e1 {:RESULT = e1;:}| extension:e1 {:RESULT = e1;:}
    | term:e1 {:RESULT = e1;:}| no:e1 {:RESULT = e1;:}| result:e1 {:RESULT = e1;:}
    | llavea:e1 {:RESULT = e1;:}| llavec:e1 {:RESULT = e1;:}| y:e1 {:RESULT = e1;:}
    | coma:e1 {:RESULT = e1;:}| igual:e1 {:RESULT = e1;:}| corchetea:e1 {:RESULT = e1;:}| corchetec:e1 {:RESULT = e1;:}
    | parentesisa:e1 {:RESULT = e1;:}| parentesisc:e1 {:RESULT = e1;:}| mas:e1 {:RESULT = e1;:}
    | mult:e1 {:RESULT = e1;:}| menos:e1 {:RESULT = e1;:}| div:e1 {:RESULT = e1;:}| percent:e1 {:RESULT = e1;:}
    | puntocoma:e1 {:RESULT = e1;:}| dosp:e1 {:RESULT = e1;:}| lin:e1 {:RESULT = e1;:}| tab:e1 {:RESULT = e1;:}
    | esp:e1 {:RESULT = e1;:}| comilla:e1 {:RESULT = e1;:}| pre:e1 {:RESULT = e1;:}| punto:e1 {:RESULT = e1;:}
    | caracterma:e1 {:RESULT = e1;:} | caracterme:e1 {:RESULT = e1;:} | idt:e1 {:RESULT = e1;:}| idn:e1| number:e1 {:RESULT = e1;:}
    | codigo:e1 {:RESULT = e1;:}| id:e1 {:RESULT = e1;:}| dpp:e1 {:RESULT = e1;:}
;

NUMBERN ::= NUMBER:e1 {:RESULT = Integer.parseInt(e1);:}
        | menos:e1 NUMBER:e2 {:RESULT = Integer.parseInt(e1+e2);:}
;

NUMBER ::= NUMBER:e1 number:e2 {:RESULT = e1+e2;:}
        | number:e1 {:RESULT = e1;:}
;
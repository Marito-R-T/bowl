package com.mycompany.bowl.analizadores;

import java_cup.runtime.*;
import com.mycompany.bowl.backend.lenguaje.*;

class SintaxisLenguajes;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    }

    public Symbol getS(){
        System.out.println(this.s);
        return this.s;
    }
:};


terminal or, version, autor, lanzamiento, extension, term, no, result;
terminal llavea, llavec, y, pord, coma, igual, corchetea, corchetec, parentesisa, parentesisc;
terminal mas, mult, menos, div, percent, puntocoma, dosp, lin, tab, esp, comilla, pre, punto;
terminal caracter, idn, codigo, nombre, pp, id, dpp, printf;
terminal String nom, number, idt;

non terminal Lenguaje S;
non terminal InfoLenguaje INFO, INFOP;
non terminal String VR;
non terminal COD, EXP, EXPP, REG, RC, RCP, TER, T;
non terminal TP, N, PROD, PRODP, PR, TE, NO, SEM, RES, OP, OPP;
non terminal O, ID, CODP, REGP;

start with S;

S ::= INFO:e1 pp COD pp EXP pp TER PROD {:Lenguaje lenguaje = new Lenguaje(); lenguaje.setInfo(e1); RESULT = lenguaje;:}
;

INFO ::= INFO:e1 INFOP:e2 {:e1.ingresarDato(e2); RESULT = e1;:}
    | INFOP:e1 {:RESULT = e1;:}
;

INFOP ::= nombre dosp nom:e1 puntocoma {:InfoLenguaje info = new InfoLenguaje(); info.setNombre(e1); RESULT = info;:}
    | version dosp VR:e1 puntocoma {:InfoLenguaje info = new InfoLenguaje(); info.setVersion(e1); RESULT = info;:}
    | autor dosp nom:e1 puntocoma {:InfoLenguaje info = new InfoLenguaje(); info.setAutor(e1); RESULT = info;:}
    | lanzamiento dosp number:e1 puntocoma {:InfoLenguaje info = new InfoLenguaje(); info.setLanzamiento(Integer.parseInt(e1)); RESULT = info;:}
    | extension dosp idt:e1 puntocoma {:InfoLenguaje info = new InfoLenguaje(); info.setExtension(e1); RESULT = info;:}
;

VR ::= number:e1 {:RESULT = e1;:}
    | number:e1 punto VR:e2 {:RESULT = e1+e2;:}
;

EXP ::= EXP EXPP
    | EXPP
;

EXPP ::= ID igual REG puntocoma
;

REG ::= REG pre
    | REG mas
    | REG mult
    | REG REGP
    | REGP
    | REG or REGP
;

REGP ::= comilla nom comilla
    | corchetea RC corchetec
    | parentesisa REG parentesisc
    | corchetea REG corchetec
    | punto
;

RC ::= RC RCP
    | RCP
;

RCP ::= lin
    | tab
    | esp
    | number menos number
    | caracter menos caracter
;

TER ::= TER N
    | TER T
    | N
    | T
;

T ::= term ID TP
;

TP ::= coma ID TP 
    | puntocoma
;

N ::= no term ID TP
;

PROD ::= PROD PRODP
    PRODP
;

PRODP ::= idn dpp PR
;

PR ::= TE PR
    | NO PR
    | SEM puntocoma
    | puntocoma
;

TE ::= idt dosp ID
    | idt
;

NO ::= idn
    | idn dosp ID
;

SEM ::= llavea RES llavec
;

RES ::= result igual OP puntocoma
    | printf parentesisa comilla COD pord comilla coma ID parentesisc puntocoma
;

OP ::= OP mas OPP
    | OP menos OPP
    | OPP
;

OPP ::= OPP mult O
    | OPP div O
    | O
;

O ::= number
    | parentesisa OP parentesisc
;

ID ::= id
    | idt
    | idn
;

COD ::= COD CODP
    | CODP
;
CODP ::= or| nom| version| autor| lanzamiento| extension| term| no| result
    | llavea| llavec| y| coma| igual| corchetea| corchetec| parentesisa| parentesisc
    | mas| mult| menos| div| percent| puntocoma| dosp| lin| tab| esp| comilla| pre| punto
    | caracter| idt| idn| number| codigo| nombre| id| dpp
;

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.bowl.analizadores;

import java_cup.runtime.*;
import com.mycompany.bowl.backend.lenguaje.*;
import com.mycompany.bowl.backend.lenguaje.lexico.nodos.*;
import com.mycompany.bowl.backend.lenguaje.lexico.*;
import java.util.ArrayList;
import java.util.List;
import com.mycompany.bowl.backend.lenguaje.sintactico.*;
import com.mycompany.bowl.backend.lenguaje.sintactico.producciones.*;
import com.mycompany.bowl.backend.lenguaje.semantico.Semantico;
import com.mycompany.bowl.backend.errores.ErrorSintactico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxisLenguajes extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintaxisLenguajesSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxisLenguajes() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxisLenguajes(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisLenguajes(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\002\014\000\002\002" +
    "\013\000\002\002\012\000\002\002\013\000\002\016\004" +
    "\000\002\016\003\000\002\017\005\000\002\020\005\000" +
    "\002\020\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\005\003" +
    "\000\002\005\005\000\002\037\004\000\002\037\003\000" +
    "\002\037\004\000\002\040\006\000\002\040\006\000\002" +
    "\040\004\000\002\032\005\000\002\032\003\000\002\032" +
    "\004\000\002\033\004\000\002\033\003\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\003\000" +
    "\002\034\005\000\002\034\005\000\002\034\003\000\002" +
    "\035\004\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\004\000\002\023\004\000\002\023\004\000\002" +
    "\024\005\000\002\024\005\000\002\024\006\000\002\025" +
    "\005\000\002\025\006\000\002\025\007\000\002\030\004" +
    "\000\002\030\003\000\002\030\004\000\002\031\006\000" +
    "\002\031\005\000\002\022\004\000\002\022\004\000\002" +
    "\022\003\000\002\022\003\000\002\026\005\000\002\026" +
    "\003\000\002\026\004\000\002\027\005\000\002\027\003" +
    "\000\002\027\004\000\002\042\005\000\002\042\004\000" +
    "\002\042\003\000\002\042\004\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\003\000\002\011\003\000\002\006\004" +
    "\000\002\006\003\000\002\012\004\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\014\004\000\002\014\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\016\003\013\005\011\006\012\007\006\010" +
    "\014\044\007\001\002\000\016\005\011\006\012\007\006" +
    "\010\014\044\007\045\051\001\002\000\004\002\047\001" +
    "\002\000\004\034\044\001\002\000\004\034\041\001\002" +
    "\000\016\005\ufff6\006\ufff6\007\ufff6\010\ufff6\044\ufff6\045" +
    "\ufff6\001\002\000\004\034\031\001\002\000\004\034\021" +
    "\001\002\000\004\045\020\001\002\000\004\034\015\001" +
    "\002\000\004\056\016\001\002\000\004\033\017\001\002" +
    "\000\016\005\ufff0\006\ufff0\007\ufff0\010\ufff0\044\ufff0\045" +
    "\ufff0\001\002\000\016\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\044\ufff5\045\ufff5\001\002\000\010\056\023\057\026\060" +
    "\024\001\002\000\012\033\uffad\056\uffad\057\uffad\060\uffad" +
    "\001\002\000\026\003\uffb4\014\uffb4\021\uffb4\033\uffb4\042" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002" +
    "\000\026\003\uffb3\014\uffb3\021\uffb3\033\uffb3\042\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\001\002\000\012" +
    "\033\030\056\023\057\026\060\024\001\002\000\026\003" +
    "\uffb5\014\uffb5\021\uffb5\033\uffb5\042\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\001\002\000\012\033\uffae\056" +
    "\uffae\057\uffae\060\uffae\001\002\000\016\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\044\ufff2\045\ufff2\001\002\000\004\055" +
    "\034\001\002\000\004\033\040\001\002\000\010\033\uffef" +
    "\042\035\055\036\001\002\000\010\033\uff7e\042\uff7e\055" +
    "\uff7e\001\002\000\004\055\034\001\002\000\010\033\uff7f" +
    "\042\uff7f\055\uff7f\001\002\000\004\033\uffee\001\002\000" +
    "\016\005\ufff3\006\ufff3\007\ufff3\010\ufff3\044\ufff3\045\ufff3" +
    "\001\002\000\010\056\023\057\026\060\024\001\002\000" +
    "\012\033\043\056\023\057\026\060\024\001\002\000\016" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\044\ufff4\045\ufff4\001" +
    "\002\000\004\055\034\001\002\000\006\033\046\055\036" +
    "\001\002\000\016\005\ufff1\006\ufff1\007\ufff1\010\ufff1\044" +
    "\ufff1\045\ufff1\001\002\000\004\002\001\001\002\000\016" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\044\ufff7\045\ufff7\001" +
    "\002\000\134\004\102\005\124\006\105\007\061\010\072" +
    "\011\101\012\126\013\071\014\070\015\067\016\112\020" +
    "\062\021\063\022\121\023\116\024\077\025\076\026\075" +
    "\027\113\030\073\031\125\032\052\033\120\034\074\035" +
    "\057\036\122\037\103\040\054\041\115\042\104\043\117" +
    "\044\123\045\064\046\110\051\100\052\065\053\132\054" +
    "\060\055\130\056\131\057\107\060\055\061\056\062\053" +
    "\064\127\001\002\000\134\004\uff95\005\uff95\006\uff95\007" +
    "\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95" +
    "\016\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025" +
    "\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95" +
    "\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042" +
    "\uff95\043\uff95\044\uff95\045\uff95\046\uff95\051\uff95\052\uff95" +
    "\053\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95\062" +
    "\uff95\063\uff95\064\uff95\001\002\000\134\004\uff8b\005\uff8b" +
    "\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014" +
    "\uff8b\015\uff8b\016\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b" +
    "\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032" +
    "\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\051" +
    "\uff8b\052\uff8b\053\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b" +
    "\061\uff8b\062\uff8b\063\uff8b\064\uff8b\001\002\000\134\004" +
    "\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f" +
    "\013\uff8f\014\uff8f\015\uff8f\016\uff8f\020\uff8f\021\uff8f\022" +
    "\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037" +
    "\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f" +
    "\046\uff8f\051\uff8f\052\uff8f\053\uff8f\055\uff8f\056\uff8f\057" +
    "\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\001\002" +
    "\000\134\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011" +
    "\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89\020\uff89" +
    "\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027" +
    "\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89" +
    "\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044" +
    "\uff89\045\uff89\046\uff89\051\uff89\052\uff89\053\uff89\055\uff89" +
    "\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89\064" +
    "\uff89\001\002\000\134\004\uff8c\005\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016" +
    "\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c" +
    "\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034" +
    "\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\044\uff8c\045\uff8c\046\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c" +
    "\063\uff8c\064\uff8c\001\002\000\134\004\uff92\005\uff92\006" +
    "\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92" +
    "\015\uff92\016\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024" +
    "\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92" +
    "\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041" +
    "\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\051\uff92" +
    "\052\uff92\053\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\064\uff92\001\002\000\010\056\023" +
    "\057\026\060\024\001\002\000\134\004\uffa6\005\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\063\uffa6\064\uffa6\001\002\000\134\004\uff9f" +
    "\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\014\uff9f\015\uff9f\016\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\051\uff9f\052\uff9f\053\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\001\002\000" +
    "\134\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\045\uff9e\046\uff9e\051\uff9e\052\uff9e\053\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\001\002\000\014\003\136\016\141\056\023\057\026\060" +
    "\024\001\002\000\134\004\uff83\005\uff83\006\uff83\007\uff83" +
    "\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016" +
    "\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034" +
    "\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83" +
    "\043\uff83\044\uff83\045\uff83\046\uff83\051\uff83\052\uff83\053" +
    "\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83" +
    "\063\uff83\064\uff83\001\002\000\134\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab" +
    "\015\uffab\016\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\051\uffab" +
    "\052\uffab\053\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\063\uffab\064\uffab\001\002\000\134\004\uffa1" +
    "\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013" +
    "\uffa1\014\uffa1\015\uffa1\016\uffa1\020\uffa1\021\uffa1\022\uffa1" +
    "\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046" +
    "\uffa1\051\uffa1\052\uffa1\053\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\001\002\000" +
    "\134\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2" +
    "\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2" +
    "\045\uffa2\046\uffa2\051\uffa2\052\uffa2\053\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2" +
    "\001\002\000\134\004\uff80\005\uff80\006\uff80\007\uff80\010" +
    "\uff80\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80\016\uff80" +
    "\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80\026" +
    "\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80" +
    "\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043" +
    "\uff80\044\uff80\045\uff80\046\uff80\051\uff80\052\uff80\053\uff80" +
    "\055\uff80\056\uff80\057\uff80\060\uff80\061\uff80\062\uff80\063" +
    "\uff80\064\uff80\001\002\000\134\004\uffa5\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\064\uffa5\001\002\000\134\004\uff97\005" +
    "\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97" +
    "\014\uff97\015\uff97\016\uff97\020\uff97\021\uff97\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97" +
    "\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040" +
    "\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97" +
    "\051\uff97\052\uff97\053\uff97\055\uff97\056\uff97\057\uff97\060" +
    "\uff97\061\uff97\062\uff97\063\uff97\064\uff97\001\002\000\134" +
    "\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012" +
    "\uff93\013\uff93\014\uff93\015\uff93\016\uff93\020\uff93\021\uff93" +
    "\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030" +
    "\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93" +
    "\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\046\uff93\051\uff93\052\uff93\053\uff93\055\uff93\056\uff93" +
    "\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\001" +
    "\002\000\134\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99" +
    "\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\020" +
    "\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99" +
    "\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035" +
    "\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99" +
    "\044\uff99\045\uff99\046\uff99\051\uff99\052\uff99\053\uff99\055" +
    "\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99" +
    "\064\uff99\001\002\000\134\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a" +
    "\016\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042" +
    "\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\051\uff9a\052\uff9a" +
    "\053\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062" +
    "\uff9a\063\uff9a\064\uff9a\001\002\000\134\004\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014" +
    "\uff9b\015\uff9b\016\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\064\uff9b\001\002\000\134\004" +
    "\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84" +
    "\013\uff84\014\uff84\015\uff84\016\uff84\020\uff84\021\uff84\022" +
    "\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84" +
    "\046\uff84\051\uff84\052\uff84\053\uff84\055\uff84\056\uff84\057" +
    "\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84\001\002" +
    "\000\134\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\051\uffa4\052\uffa4\053\uffa4\055\uffa4" +
    "\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064" +
    "\uffa4\001\002\000\134\004\uffaa\005\uffaa\006\uffaa\007\uffaa" +
    "\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\063\uffaa\064\uffaa\001\002\000\134\004\uff90\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014\uff90" +
    "\015\uff90\016\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024" +
    "\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90" +
    "\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041" +
    "\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\051\uff90" +
    "\052\uff90\053\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061" +
    "\uff90\062\uff90\063\uff90\064\uff90\001\002\000\134\004\uff8d" +
    "\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031" +
    "\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046" +
    "\uff8d\051\uff8d\052\uff8d\053\uff8d\055\uff8d\056\uff8d\057\uff8d" +
    "\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\001\002\000" +
    "\134\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\046\uffa7\051\uffa7\052\uffa7\053\uffa7\055\uffa7\056" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\001\002\000\134\004\102\005\124\006\105\007\061\010" +
    "\072\011\101\012\126\013\071\014\070\015\067\016\112" +
    "\020\062\021\063\022\121\023\116\024\077\025\076\026" +
    "\075\027\113\030\073\031\125\032\052\033\120\034\074" +
    "\035\057\036\122\037\103\040\054\041\115\042\104\043" +
    "\117\044\123\045\321\046\110\051\100\052\065\053\132" +
    "\054\060\055\130\056\131\057\107\060\055\061\056\062" +
    "\053\064\127\001\002\000\134\004\uff86\005\uff86\006\uff86" +
    "\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015" +
    "\uff86\016\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86" +
    "\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033" +
    "\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86" +
    "\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\051\uff86\052" +
    "\uff86\053\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86" +
    "\062\uff86\063\uff86\064\uff86\001\002\000\134\004\uff85\005" +
    "\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85" +
    "\014\uff85\015\uff85\016\uff85\020\uff85\021\uff85\022\uff85\023" +
    "\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85" +
    "\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040" +
    "\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85" +
    "\051\uff85\052\uff85\053\uff85\055\uff85\056\uff85\057\uff85\060" +
    "\uff85\061\uff85\062\uff85\063\uff85\064\uff85\001\002\000\134" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb" +
    "\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\064\ufffb\001" +
    "\002\000\134\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\051\uffa0\052\uffa0\053\uffa0\055" +
    "\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\064\uffa0\001\002\000\134\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98" +
    "\016\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98" +
    "\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\046\uff98\051\uff98\052\uff98" +
    "\053\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\063\uff98\064\uff98\001\002\000\132\004\102\005\124" +
    "\006\105\007\061\010\072\011\101\012\126\013\071\014" +
    "\070\015\067\016\112\020\062\021\063\022\121\023\116" +
    "\024\077\025\076\026\075\027\113\030\073\031\125\032" +
    "\052\033\120\034\074\035\057\036\122\037\103\040\054" +
    "\041\115\042\104\043\117\044\123\045\133\046\110\051" +
    "\100\052\065\053\132\055\130\056\131\057\107\060\055" +
    "\061\056\062\053\064\127\001\002\000\134\004\uff8e\005" +
    "\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\020\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e" +
    "\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e" +
    "\051\uff8e\052\uff8e\053\uff8e\055\uff8e\056\uff8e\057\uff8e\060" +
    "\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\001\002\000\134" +
    "\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\051\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\001" +
    "\002\000\134\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\020" +
    "\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87" +
    "\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035" +
    "\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87" +
    "\044\uff87\045\uff87\046\uff87\051\uff87\052\uff87\053\uff87\055" +
    "\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87" +
    "\064\uff87\001\002\000\134\004\uff94\005\uff94\006\uff94\007" +
    "\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94" +
    "\016\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025" +
    "\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\051\uff94\052\uff94" +
    "\053\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062" +
    "\uff94\063\uff94\064\uff94\001\002\000\134\004\uff9d\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\064\uff9d\001\002\000\134\004" +
    "\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91" +
    "\013\uff91\014\uff91\015\uff91\016\uff91\020\uff91\021\uff91\022" +
    "\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037" +
    "\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\051\uff91\052\uff91\053\uff91\055\uff91\056\uff91\057" +
    "\uff91\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\001\002" +
    "\000\134\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\051\uffa9\052\uffa9\053\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064" +
    "\uffa9\001\002\000\134\004\uffa8\005\uffa8\006\uffa8\007\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\046\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8" +
    "\063\uffa8\064\uffa8\001\002\000\134\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96" +
    "\015\uff96\016\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024" +
    "\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96" +
    "\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041" +
    "\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\051\uff96" +
    "\052\uff96\053\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061" +
    "\uff96\062\uff96\063\uff96\064\uff96\001\002\000\134\004\uffa3" +
    "\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\001\002\000" +
    "\134\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81" +
    "\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81\020\uff81\021" +
    "\uff81\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81" +
    "\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036" +
    "\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81" +
    "\045\uff81\046\uff81\051\uff81\052\uff81\053\uff81\055\uff81\056" +
    "\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81" +
    "\001\002\000\134\004\uff88\005\uff88\006\uff88\007\uff88\010" +
    "\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88" +
    "\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026" +
    "\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88" +
    "\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\044\uff88\045\uff88\046\uff88\051\uff88\052\uff88\053\uff88" +
    "\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063" +
    "\uff88\064\uff88\001\002\000\134\004\uff8a\005\uff8a\006\uff8a" +
    "\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015" +
    "\uff8a\016\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\051\uff8a\052" +
    "\uff8a\053\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a" +
    "\062\uff8a\063\uff8a\064\uff8a\001\002\000\134\004\uff82\005" +
    "\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82\013\uff82" +
    "\014\uff82\015\uff82\016\uff82\020\uff82\021\uff82\022\uff82\023" +
    "\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82" +
    "\051\uff82\052\uff82\053\uff82\055\uff82\056\uff82\057\uff82\060" +
    "\uff82\061\uff82\062\uff82\063\uff82\064\uff82\001\002\000\014" +
    "\003\136\016\141\056\023\057\026\060\024\001\002\000" +
    "\134\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac" +
    "\045\uffac\046\uffac\051\uffac\052\uffac\053\uffac\055\uffac\056" +
    "\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac" +
    "\001\002\000\004\021\316\001\002\000\016\003\206\016" +
    "\141\045\315\056\023\057\026\060\024\001\002\000\016" +
    "\003\uffec\016\uffec\045\uffec\056\uffec\057\uffec\060\uffec\001" +
    "\002\000\016\003\206\016\141\045\205\056\023\057\026" +
    "\060\024\001\002\000\004\021\142\001\002\000\014\003" +
    "\150\022\144\024\143\042\146\050\152\001\002\000\014" +
    "\003\150\022\144\024\143\042\146\050\152\001\002\000" +
    "\016\035\171\036\165\037\172\055\166\061\167\062\164" +
    "\001\002\000\020\004\uffe6\022\144\024\143\025\uffe6\033" +
    "\uffe6\042\146\050\152\001\002\000\026\004\uffdc\022\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\033\uffdc\041\uffdc\042" +
    "\uffdc\050\uffdc\001\002\000\006\004\160\033\157\001\002" +
    "\000\004\033\156\001\002\000\026\004\uffe3\022\uffe3\024" +
    "\uffe3\025\uffe3\026\153\027\154\033\uffe3\041\155\042\uffe3" +
    "\050\uffe3\001\002\000\026\004\uffdf\022\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\033\uffdf\041\uffdf\042\uffdf\050\uffdf" +
    "\001\002\000\026\004\uffe1\022\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\033\uffe1\041\uffe1\042\uffe1\050\uffe1\001\002" +
    "\000\026\004\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\033\uffe0\041\uffe0\042\uffe0\050\uffe0\001\002\000\026" +
    "\004\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\033" +
    "\uffe2\041\uffe2\042\uffe2\050\uffe2\001\002\000\010\004\uffe5" +
    "\025\uffe5\033\uffe5\001\002\000\016\003\uffe9\016\uffe9\045" +
    "\uffe9\056\uffe9\057\uffe9\060\uffe9\001\002\000\012\022\144" +
    "\024\143\042\146\050\152\001\002\000\020\004\uffe7\022" +
    "\144\024\143\025\uffe7\033\uffe7\042\146\050\152\001\002" +
    "\000\026\004\uffe4\022\uffe4\024\uffe4\025\uffe4\026\153\027" +
    "\154\033\uffe4\041\155\042\uffe4\050\uffe4\001\002\000\020" +
    "\023\uffda\035\uffda\036\uffda\037\uffda\055\uffda\061\uffda\062" +
    "\uffda\001\002\000\004\030\201\001\002\000\020\023\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\055\uffd8\061\uffd8\062\uffd8\001" +
    "\002\000\004\030\177\001\002\000\004\030\175\001\002" +
    "\000\020\023\174\035\171\036\165\037\172\055\166\061" +
    "\167\062\164\001\002\000\020\023\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\055\uffd9\061\uffd9\062\uffd9\001\002\000\020\023" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\055\uffd7\061\uffd7\062\uffd7" +
    "\001\002\000\020\023\uffdb\035\uffdb\036\uffdb\037\uffdb\055" +
    "\uffdb\061\uffdb\062\uffdb\001\002\000\026\004\uffdd\022\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\033\uffdd\041\uffdd\042" +
    "\uffdd\050\uffdd\001\002\000\004\061\176\001\002\000\020" +
    "\023\uffd5\035\uffd5\036\uffd5\037\uffd5\055\uffd5\061\uffd5\062" +
    "\uffd5\001\002\000\004\055\200\001\002\000\020\023\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\055\uffd6\061\uffd6\062\uffd6\001" +
    "\002\000\004\062\202\001\002\000\020\023\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\055\uffd4\061\uffd4\062\uffd4\001\002\000" +
    "\006\004\160\025\204\001\002\000\026\004\uffde\022\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\033\uffde\041\uffde\042" +
    "\uffde\050\uffde\001\002\000\010\003\211\011\213\012\215" +
    "\001\002\000\014\003\206\016\141\056\023\057\026\060" +
    "\024\001\002\000\016\003\uffed\016\uffed\045\uffed\056\uffed" +
    "\057\uffed\060\uffed\001\002\000\016\003\uffe8\016\uffe8\045" +
    "\uffe8\056\uffe8\057\uffe8\060\uffe8\001\002\000\010\011\244" +
    "\012\245\045\314\001\002\000\006\020\240\033\313\001" +
    "\002\000\014\051\225\052\230\053\226\056\uff7a\062\uff7a" +
    "\001\002\000\012\003\233\011\213\012\215\045\232\001" +
    "\002\000\004\011\224\001\002\000\006\020\220\033\217" +
    "\001\002\000\012\003\uffd1\011\uffd1\012\uffd1\045\uffd1\001" +
    "\002\000\006\060\223\061\222\001\002\000\006\020\uffcb" +
    "\033\uffcb\001\002\000\026\003\uffaf\014\uffaf\020\uffaf\033" +
    "\uffaf\034\uffaf\046\uffaf\056\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\001\002\000\026\003\uffb0\014\uffb0\020\uffb0\033\uffb0\034" +
    "\uffb0\046\uffb0\056\uffb0\060\uffb0\061\uffb0\062\uffb0\001\002" +
    "\000\014\051\225\052\230\053\226\060\uff7a\061\uff7a\001" +
    "\002\000\012\056\uff7d\060\uff7d\061\uff7d\062\uff7d\001\002" +
    "\000\012\056\uff7b\060\uff7b\061\uff7b\062\uff7b\001\002\000" +
    "\006\060\223\061\222\001\002\000\012\056\uff7c\060\uff7c" +
    "\061\uff7c\062\uff7c\001\002\000\006\020\uffca\033\uffca\001" +
    "\002\000\010\003\253\060\223\061\222\001\002\000\006" +
    "\011\244\012\245\001\002\000\006\020\240\033\237\001" +
    "\002\000\006\020\220\033\236\001\002\000\012\003\uffd3" +
    "\011\uffd3\012\uffd3\045\uffd3\001\002\000\012\003\uffd2\011" +
    "\uffd2\012\uffd2\045\uffd2\001\002\000\006\056\243\062\242" +
    "\001\002\000\006\020\uffce\033\uffce\001\002\000\024\003" +
    "\uffb1\014\uffb1\020\uffb1\033\uffb1\034\uffb1\056\uffb1\060\uffb1" +
    "\061\uffb1\062\uffb1\001\002\000\024\003\uffb2\014\uffb2\020" +
    "\uffb2\033\uffb2\034\uffb2\056\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\001\002\000\014\051\225\052\230\053\226\056\uff7a\062" +
    "\uff7a\001\002\000\004\011\246\001\002\000\014\051\225" +
    "\052\230\053\226\060\uff7a\061\uff7a\001\002\000\006\060" +
    "\223\061\222\001\002\000\006\020\uffc9\033\uffc9\001\002" +
    "\000\006\056\243\062\242\001\002\000\006\020\uffcc\033" +
    "\uffcc\001\002\000\006\060\223\061\222\001\002\000\010" +
    "\002\ufffd\060\223\061\222\001\002\000\010\002\uffc7\060" +
    "\uffc7\061\uffc7\001\002\000\004\046\257\001\002\000\020" +
    "\003\265\014\266\033\260\056\243\060\223\061\222\062" +
    "\242\001\002\000\010\002\uffb7\060\uffb7\061\uffb7\001\002" +
    "\000\020\003\uffc0\014\uffc0\033\uffc0\056\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\001\002\000\022\003\uffbe\014\uffbe\033\uffbe" +
    "\034\305\056\uffbe\060\uffbe\061\uffbe\062\uffbe\001\002\000" +
    "\020\003\265\014\266\033\260\056\243\060\223\061\222" +
    "\062\242\001\002\000\010\002\uffc4\060\uffc4\061\uffc4\001" +
    "\002\000\016\003\300\033\276\056\243\060\223\061\222" +
    "\062\242\001\002\000\132\004\102\005\124\006\105\007" +
    "\061\010\072\011\101\012\126\013\071\014\070\015\067" +
    "\016\112\020\062\021\063\022\121\023\116\024\077\025" +
    "\076\026\075\027\113\030\073\031\125\032\052\033\120" +
    "\034\074\035\057\036\122\037\103\040\054\041\115\042" +
    "\104\043\117\044\123\046\110\051\100\052\065\053\132" +
    "\055\130\056\131\057\107\060\055\061\056\062\053\063" +
    "\273\064\127\001\002\000\020\003\uffc1\014\uffc1\033\uffc1" +
    "\056\uffc1\060\uffc1\061\uffc1\062\uffc1\001\002\000\022\003" +
    "\uffbb\014\uffbb\033\uffbb\034\271\056\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\001\002\000\010\056\023\057\026\060\024\001" +
    "\002\000\020\003\uffbc\014\uffbc\033\uffbc\056\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\001\002\000\010\002\uffb8\060\uffb8\061" +
    "\uffb8\001\002\000\132\004\102\005\124\006\105\007\061" +
    "\010\072\011\101\012\126\013\071\014\070\015\067\016" +
    "\112\020\062\021\063\022\121\023\116\024\077\025\076" +
    "\026\075\027\113\030\073\031\125\032\052\033\120\034" +
    "\074\035\057\036\122\037\103\040\054\041\115\042\104" +
    "\043\117\044\123\046\110\051\100\052\065\053\132\055" +
    "\130\056\131\057\107\060\055\061\056\062\053\063\275" +
    "\064\127\001\002\000\010\002\uffb9\060\uffb9\061\uffb9\001" +
    "\002\000\010\002\uffb6\060\uffb6\061\uffb6\001\002\000\020" +
    "\003\uffba\014\uffba\033\uffba\056\uffba\060\uffba\061\uffba\062" +
    "\uffba\001\002\000\014\003\300\056\243\060\223\061\222" +
    "\062\242\001\002\000\020\003\uffbd\014\uffbd\033\uffbd\056" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\001\002\000\020\003\uffc2" +
    "\014\uffc2\033\uffc2\056\uffc2\060\uffc2\061\uffc2\062\uffc2\001" +
    "\002\000\010\002\uffc5\060\uffc5\061\uffc5\001\002\000\020" +
    "\003\uffc3\014\uffc3\033\uffc3\056\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\001\002\000\010\056\023\057\026\060\024\001\002" +
    "\000\020\003\uffbf\014\uffbf\033\uffbf\056\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\001\002\000\010\002\uffc8\060\uffc8\061\uffc8" +
    "\001\002\000\010\002\uffc6\060\uffc6\061\uffc6\001\002\000" +
    "\006\056\243\062\242\001\002\000\006\020\uffcd\033\uffcd" +
    "\001\002\000\012\003\uffd0\011\uffd0\012\uffd0\045\uffd0\001" +
    "\002\000\012\003\uffcf\011\uffcf\012\uffcf\045\uffcf\001\002" +
    "\000\016\003\uffeb\016\uffeb\045\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\001\002\000\014\003\150\022\144\024\143\042\146" +
    "\050\152\001\002\000\006\004\160\033\320\001\002\000" +
    "\016\003\uffea\016\uffea\045\uffea\056\uffea\057\uffea\060\uffea" +
    "\001\002\000\014\003\136\016\141\056\023\057\026\060" +
    "\024\001\002\000\134\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\064\ufffc\001\002\000\132\004\102\005\124\006" +
    "\105\007\061\010\072\011\101\012\126\013\071\014\070" +
    "\015\067\016\112\020\062\021\063\022\121\023\116\024" +
    "\077\025\076\026\075\027\113\030\073\031\125\032\052" +
    "\033\120\034\074\035\057\036\122\037\103\040\054\041" +
    "\115\042\104\043\117\044\123\045\324\046\110\051\100" +
    "\052\065\053\132\055\130\056\131\057\107\060\055\061" +
    "\056\062\053\064\127\001\002\000\014\003\136\016\141" +
    "\056\023\057\026\060\024\001\002\000\016\003\206\016" +
    "\141\045\326\056\023\057\026\060\024\001\002\000\010" +
    "\003\211\011\213\012\215\001\002\000\012\003\233\011" +
    "\213\012\215\045\330\001\002\000\010\003\253\060\223" +
    "\061\222\001\002\000\010\002\000\060\223\061\222\001" +
    "\002\000\016\003\206\016\141\045\333\056\023\057\026" +
    "\060\024\001\002\000\010\003\211\011\213\012\215\001" +
    "\002\000\012\003\233\011\213\012\215\045\335\001\002" +
    "\000\010\003\253\060\223\061\222\001\002\000\010\002" +
    "\uffff\060\223\061\222\001\002\000\016\003\206\016\141" +
    "\045\340\056\023\057\026\060\024\001\002\000\010\003" +
    "\211\011\213\012\215\001\002\000\012\003\233\011\213" +
    "\012\215\045\342\001\002\000\010\003\253\060\223\061" +
    "\222\001\002\000\010\002\ufffe\060\223\061\222\001\002" +
    "\000\006\033\ufff8\042\ufff8\001\002\000\006\033\346\042" +
    "\347\001\002\000\134\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\064\ufffa\001\002\000\010\056\023\057\026\060" +
    "\024\001\002\000\006\033\ufff9\042\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\010\002\004\003\003\004\007\001\001\000" +
    "\004\004\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\024\007\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\031\014\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\036\014\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\041\007\021\001\001\000\004\007\026" +
    "\001\001\000\002\001\001\000\004\014\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\113\013\065\016\105\017\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\343\020\344\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\134\037\336\040" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\322\013\065\017" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\134\037\137" +
    "\040\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\134\040\207\001\001\000\002\001\001\000\006" +
    "\007\134\040\206\001\001\000\002\001\001\000\010\032" +
    "\146\033\144\034\150\001\001\000\010\032\202\033\144" +
    "\034\150\001\001\000\006\035\167\036\162\001\001\000" +
    "\004\034\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\160\034\150\001" +
    "\001\000\004\034\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\213\024\211" +
    "\025\215\001\001\000\006\007\134\040\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\310\001\001\000\006\024\233\025" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\255" +
    "\030\253\031\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\250\001\001\000\002" +
    "\001\001\000\004\015\246\001\001\000\004\011\247\001" +
    "\001\000\002\001\001\000\004\010\251\001\001\000\002" +
    "\001\001\000\006\011\255\031\307\001\001\000\006\011" +
    "\255\031\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\261\011\267\022\262\026\266\027\260\042" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\261\011\267\026\303\027\301\042" +
    "\302\001\001\000\002\001\001\000\012\010\261\011\267" +
    "\026\300\027\276\001\001\000\006\012\273\013\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\261\011\267\026\300\027\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\032\316\033\144\034\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\134\037\331\040\136\001\001\000\002\001\001\000\004" +
    "\013\133\001\001\000\010\007\134\037\324\040\136\001" +
    "\001\000\006\007\134\040\206\001\001\000\010\023\326" +
    "\024\211\025\215\001\001\000\006\024\233\025\234\001" +
    "\001\000\010\011\255\030\330\031\254\001\001\000\006" +
    "\011\255\031\306\001\001\000\006\007\134\040\206\001" +
    "\001\000\010\023\333\024\211\025\215\001\001\000\006" +
    "\024\233\025\234\001\001\000\010\011\255\030\335\031" +
    "\254\001\001\000\006\011\255\031\306\001\001\000\006" +
    "\007\134\040\206\001\001\000\010\023\340\024\211\025" +
    "\215\001\001\000\006\024\233\025\234\001\001\000\010" +
    "\011\255\030\342\031\254\001\001\000\006\011\255\031" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\347\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisLenguajes$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisLenguajes$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisLenguajes$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        ErrorSintactico.informarError(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        ErrorSintactico.informarError(s);
    }

    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxisLenguajes$actions {
  private final SintaxisLenguajes parser;

  /** Constructor */
  CUP$SintaxisLenguajes$actions(SintaxisLenguajes parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxisLenguajes$do_action_part00000000(
    int                        CUP$SintaxisLenguajes$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisLenguajes$parser,
    java.util.Stack            CUP$SintaxisLenguajes$stack,
    int                        CUP$SintaxisLenguajes$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisLenguajes$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisLenguajes$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		Lenguaje start_val = (Lenguaje)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisLenguajes$parser.done_parsing();
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INFO pp IMPORT COD pp EXP pp TER pp PROD 
            {
              Lenguaje RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-9)).right;
		InfoLenguaje e1 = (InfoLenguaje)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-9)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-7)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-7)).right;
		String e6 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-4)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		TablaDeSimbolos e4 = (TablaDeSimbolos)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		ListaProducciones e5 = (ListaProducciones)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		Lenguaje lenguaje = new Lenguaje(); lenguaje.setInfo(e1); lenguaje.realizarCodigo(e6, e2); lenguaje.setBinario(e3); 
                                                            lenguaje.setTablaSimbolos(e4); lenguaje.setProducciones(e5); RESULT = lenguaje;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= INFO pp IMPORT pp EXP pp TER pp PROD 
            {
              Lenguaje RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-8)).right;
		InfoLenguaje e1 = (InfoLenguaje)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-4)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		TablaDeSimbolos e4 = (TablaDeSimbolos)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		ListaProducciones e5 = (ListaProducciones)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		Lenguaje lenguaje = new Lenguaje(); lenguaje.setInfo(e1); lenguaje.realizarCodigo(e2, ""); lenguaje.setBinario(e3); 
                                                            lenguaje.setTablaSimbolos(e4); lenguaje.setProducciones(e5); RESULT = lenguaje;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= INFO pp pp EXP pp TER pp PROD 
            {
              Lenguaje RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-7)).right;
		InfoLenguaje e1 = (InfoLenguaje)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-4)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		TablaDeSimbolos e4 = (TablaDeSimbolos)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		ListaProducciones e5 = (ListaProducciones)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		Lenguaje lenguaje = new Lenguaje(); lenguaje.setInfo(e1); lenguaje.realizarCodigo("", ""); lenguaje.setBinario(e3); 
                                                            lenguaje.setTablaSimbolos(e4); lenguaje.setProducciones(e5); RESULT = lenguaje;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= INFO pp COD pp EXP pp TER pp PROD 
            {
              Lenguaje RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-8)).right;
		InfoLenguaje e1 = (InfoLenguaje)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-4)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		TablaDeSimbolos e4 = (TablaDeSimbolos)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		ListaProducciones e5 = (ListaProducciones)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		Lenguaje lenguaje = new Lenguaje(); lenguaje.setInfo(e1); lenguaje.realizarCodigo("", e2); lenguaje.setBinario(e3); 
                                                            lenguaje.setTablaSimbolos(e4); lenguaje.setProducciones(e5); RESULT = lenguaje;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORT ::= IMPORT IMPORTP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1+"\n"+e2;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("IMPORT",12, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORT ::= IMPORTP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("IMPORT",12, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTP ::= imp IDIMP puntocoma 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		RESULT = "import " + e1 + ";";
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("IMPORTP",13, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDIMP ::= IDIMP punto ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1+"."+e2;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("IDIMP",14, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDIMP ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("IDIMP",14, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INFO ::= INFO INFOP 
            {
              InfoLenguaje RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		InfoLenguaje e1 = (InfoLenguaje)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		InfoLenguaje e2 = (InfoLenguaje)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		e1.ingresarDato(e2); RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("INFO",1, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INFO ::= INFOP 
            {
              InfoLenguaje RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		InfoLenguaje e1 = (InfoLenguaje)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("INFO",1, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INFO ::= error pp 
            {
              InfoLenguaje RESULT =null;
		RESULT = null;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("INFO",1, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INFOP ::= nom dosp NOM puntocoma 
            {
              InfoLenguaje RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		System.out.println(e1); InfoLenguaje info = new InfoLenguaje(); info.setNombre(e1); RESULT = info;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("INFOP",2, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INFOP ::= version dosp VR puntocoma 
            {
              InfoLenguaje RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		InfoLenguaje info = new InfoLenguaje(); info.setVersion(e1); RESULT = info;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("INFOP",2, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INFOP ::= autor dosp NOM puntocoma 
            {
              InfoLenguaje RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		InfoLenguaje info = new InfoLenguaje(); info.setAutor(e1); RESULT = info;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("INFOP",2, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INFOP ::= lanzamiento dosp NUMBER puntocoma 
            {
              InfoLenguaje RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		InfoLenguaje info = new InfoLenguaje(); info.setLanzamiento(Integer.parseInt(e1)); RESULT = info;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("INFOP",2, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INFOP ::= extension dosp idt puntocoma 
            {
              InfoLenguaje RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		InfoLenguaje info = new InfoLenguaje(); info.setExtension(e1); RESULT = info;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("INFOP",2, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VR ::= NUMBER 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("VR",3, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VR ::= NUMBER punto VR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1+e2;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("VR",3, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= EXP EXPP 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		e2.setNivel((e1.getNivel()+1)); e2.ingresar(); Nodo n = new NodoDisyuncion(e1, e2); n.setNivel(e2.getNivel()); RESULT = n;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("EXP",29, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= EXPP 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		e1.setNivel(1); e1.ingresar(); RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("EXP",29, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= error pp 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("EXP",29, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPP ::= ID igual REG puntocoma 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		e2.setNombre(e1); RESULT = e2;/*RESULT = new ArbolBinario(e2, e1);*/
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("EXPP",30, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPP ::= y igual REG puntocoma 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		e1.setNombre(null); RESULT = e1;/*RESULT = new ArbolBinario(e1, null);*/
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("EXPP",30, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPP ::= error EXPP 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("EXPP",30, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // REG ::= REG or REGP 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = new NodoDisyuncion(e1, e2);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("REG",24, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // REG ::= REGP 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("REG",24, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // REG ::= error puntocoma 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("REG",24, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // REGP ::= REGP REGPP 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = new NodoConcat(e1, e2);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("REGP",25, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // REGP ::= REGPP 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("REGP",25, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // REGPP ::= REGPP pre 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		RESULT = new NodoOpcional(e1);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("REGPP",26, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // REGPP ::= REGPP mas 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		RESULT = new NodoMas(e1);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("REGPP",26, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // REGPP ::= REGPP mult 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		RESULT = new NodoAsterisco(e1);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("REGPP",26, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // REGPP ::= str 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = Nodo.hacerNodos(e1);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("REGPP",26, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // REGPP ::= parentesisa REG parentesisc 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("REGPP",26, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // REGPP ::= corchetea RC corchetec 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("REGPP",26, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // REGPP ::= punto 
            {
              Nodo RESULT =null;
		char c1 = 0, c2 = 250; RESULT = new NodoTerminal(c1, c2);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("REGPP",26, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RC ::= RC RCP 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = new NodoDisyuncion(e1, e2);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("RC",27, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RC ::= RCP 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("RC",27, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RCP ::= lin 
            {
              Nodo RESULT =null;
		char c1 = 10; RESULT = new NodoTerminal(c1);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("RCP",28, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RCP ::= tab 
            {
              Nodo RESULT =null;
		char c1 = 9; RESULT = new NodoTerminal(c1);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("RCP",28, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RCP ::= esp 
            {
              Nodo RESULT =null;
		char c1 = 32; RESULT = new NodoTerminal(c1);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("RCP",28, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RCP ::= number menos number 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = new NodoTerminal(e1, e2);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("RCP",28, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RCP ::= caracterma menos caracterma 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = new NodoTerminal(e1, e2);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("RCP",28, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RCP ::= caracterme menos caracterme 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = new NodoTerminal(e1, e2);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("RCP",28, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TER ::= TER N puntocoma 
            {
              TablaDeSimbolos RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		TablaDeSimbolos e1 = (TablaDeSimbolos)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		ListaNodoSintactico<NoTerminal> e2 = (ListaNodoSintactico<NoTerminal>)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		e1.getNoterminal().addAll(e2); RESULT =e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("TER",17, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TER ::= TER T puntocoma 
            {
              TablaDeSimbolos RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		TablaDeSimbolos e1 = (TablaDeSimbolos)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		ListaNodoSintactico<Terminal> e2 = (ListaNodoSintactico<Terminal>)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		e1.setNivel(e2); e1.getTerminal().addAll(e2); RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("TER",17, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TER ::= N puntocoma 
            {
              TablaDeSimbolos RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		ListaNodoSintactico<NoTerminal> e1 = (ListaNodoSintactico<NoTerminal>)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		TablaDeSimbolos t = new TablaDeSimbolos(); t.getNoterminal().addAll(e1); RESULT = t;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("TER",17, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TER ::= T puntocoma 
            {
              TablaDeSimbolos RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		ListaNodoSintactico<Terminal> e1 = (ListaNodoSintactico<Terminal>)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		TablaDeSimbolos t = new TablaDeSimbolos(); t.setNivel(e1); t.getTerminal().addAll(e1); RESULT = t;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("TER",17, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TER ::= error pp 
            {
              TablaDeSimbolos RESULT =null;
		RESULT = null;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("TER",17, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // T ::= T coma IDT 
            {
              ListaNodoSintactico<Terminal> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		ListaNodoSintactico<Terminal> e1 = (ListaNodoSintactico<Terminal>)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		e1.add(new Terminal(e2), true); RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // T ::= term TIPO IDT 
            {
              ListaNodoSintactico<Terminal> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		ListaNodoSintactico<Terminal> n = new ListaNodoSintactico<>(e2); n.add(new Terminal(e1), true); RESULT = n;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // T ::= error term TIPO IDT 
            {
              ListaNodoSintactico<Terminal> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		ListaNodoSintactico<Terminal> n = new ListaNodoSintactico<>(e2); n.add(new Terminal(e1), true); RESULT = n;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // N ::= N coma IDN 
            {
              ListaNodoSintactico<NoTerminal> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		ListaNodoSintactico<NoTerminal> e1 = (ListaNodoSintactico<NoTerminal>)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		e1.add(new NoTerminal(e2), true); RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("N",19, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // N ::= no term TIPO IDN 
            {
              ListaNodoSintactico<NoTerminal> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		ListaNodoSintactico<NoTerminal> n = new ListaNodoSintactico<>(e2); n.add(new NoTerminal(e1), true); RESULT = n;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("N",19, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // N ::= error no term TIPO IDN 
            {
              ListaNodoSintactico<NoTerminal> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		ListaNodoSintactico<NoTerminal> n = new ListaNodoSintactico<>(e2); n.add(new NoTerminal(e1), true); RESULT = n;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("N",19, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PROD ::= PROD PRODP 
            {
              ListaProducciones RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		ListaProducciones e1 = (ListaProducciones)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Produccion e2 = (Produccion)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		e1.getProducciones().add(e2); RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("PROD",22, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PROD ::= PRODP 
            {
              ListaProducciones RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Produccion e1 = (Produccion)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		ArrayList<Produccion> pr = new ArrayList<>(); pr.add(e1); RESULT = new ListaProducciones(e1);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("PROD",22, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PROD ::= error PRODP 
            {
              ListaProducciones RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Produccion e1 = (Produccion)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		ArrayList<Produccion> pr = new ArrayList<>(); pr.add(e1); RESULT = new ListaProducciones(e1);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("PROD",22, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PRODP ::= IDN dpp PR SEM 
            {
              Produccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		ArrayList<NodoSintactico> e2 = (ArrayList<NodoSintactico>)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Semantico e3 = (Semantico)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = new Produccion(new NoTerminal(e1), e2, e3);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("PRODP",23, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PRODP ::= IDN dpp SEM 
            {
              Produccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Semantico e3 = (Semantico)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		ArrayList<NodoSintactico> e2 = new ArrayList<>(); RESULT = new Produccion(new NoTerminal(e1), e2, e3);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("PRODP",23, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PR ::= PR TE 
            {
              ArrayList<NodoSintactico> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		ArrayList<NodoSintactico> e1 = (ArrayList<NodoSintactico>)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Terminal e2 = (Terminal)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("PR",16, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PR ::= PR NO 
            {
              ArrayList<NodoSintactico> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		ArrayList<NodoSintactico> e1 = (ArrayList<NodoSintactico>)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		NoTerminal e2 = (NoTerminal)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		e1.add(e2); RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("PR",16, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PR ::= TE 
            {
              ArrayList<NodoSintactico> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Terminal e1 = (Terminal)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		ArrayList<NodoSintactico> n = new ArrayList<>(); n.add(e1); RESULT = n;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("PR",16, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PR ::= NO 
            {
              ArrayList<NodoSintactico> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		NoTerminal e1 = (NoTerminal)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		ArrayList<NodoSintactico> n = new ArrayList<>(); n.add(e1); RESULT = n;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("PR",16, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TE ::= IDT dosp ID 
            {
              Terminal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = new Terminal(e1, e2);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("TE",20, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TE ::= IDT 
            {
              Terminal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = new Terminal(e1);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("TE",20, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TE ::= error TE 
            {
              Terminal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		Terminal e1 = (Terminal)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("TE",20, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NO ::= IDN dosp ID 
            {
              NoTerminal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = new NoTerminal(e1, e2);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("NO",21, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NO ::= IDN 
            {
              NoTerminal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = new NoTerminal(e1);
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("NO",21, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NO ::= error NO 
            {
              NoTerminal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		NoTerminal e1 = (NoTerminal)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("NO",21, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SEM ::= llavea COD llavecp 
            {
              Semantico RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		System.out.println(e1); e1 = e1.replaceAll("= =", "=="); e1 = e1.replaceAll("RESULT =","return ");
                                                 e1 = e1.replaceAll("RESULT=", "return "); RESULT = new Semantico(e1+"\n");
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("SEM",32, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SEM ::= llavea llavecp 
            {
              Semantico RESULT =null;
		RESULT = new Semantico("return null;\n");
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("SEM",32, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SEM ::= puntocoma 
            {
              Semantico RESULT =null;
		RESULT = new Semantico("return null;\n");
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("SEM",32, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SEM ::= error puntocoma 
            {
              Semantico RESULT =null;
		RESULT = new Semantico("return null;\n");
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("SEM",32, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ID ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("ID",5, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ID ::= idt 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("ID",5, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ID ::= idn 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("ID",5, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IDT ::= idt 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("IDT",6, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IDT ::= caracterme 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("IDT",6, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IDN ::= idn 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("IDN",7, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IDN ::= caracterma 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("IDN",7, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NOM ::= NOM ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1 + " " + e2;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("NOM",4, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NOM ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("NOM",4, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COD ::= COD CODP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1 + " " + e2;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COD ::= CODP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CODP ::= or 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CODP ::= nom 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CODP ::= version 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CODP ::= autor 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CODP ::= lanzamiento 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CODP ::= extension 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CODP ::= term 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CODP ::= no 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CODP ::= llavea 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1 + "\n";
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CODP ::= llavec 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1 + "\n";
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CODP ::= y 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CODP ::= coma 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CODP ::= igual 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CODP ::= corchetea 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CODP ::= corchetec 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CODP ::= parentesisa 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CODP ::= parentesisc 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CODP ::= mas 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CODP ::= mult 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CODP ::= menos 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CODP ::= div 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CODP ::= percent 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CODP ::= puntocoma 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1 + "\n";
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CODP ::= dosp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CODP ::= lin 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CODP ::= tab 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CODP ::= esp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CODP ::= comilla 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CODP ::= pre 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CODP ::= punto 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CODP ::= caracterma 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CODP ::= caracterme 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CODP ::= idt 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CODP ::= idn 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;

              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CODP ::= number 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CODP ::= codigo 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CODP ::= id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CODP ::= dpp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CODP ::= entero 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CODP ::= real 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CODP ::= cadena 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CODP ::= e 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CODP ::= result 
            {
              String RESULT =null;
		RESULT = "RESULT";
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("CODP",9, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NUMBER ::= NUMBER number 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1+e2;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("NUMBER",10, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.elementAt(CUP$SintaxisLenguajes$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NUMBER ::= number 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = e1;
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("NUMBER",10, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TIPO ::= entero 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = "Integer";
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TIPO ::= real 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = "Float";
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPO ::= cadena 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintaxisLenguajes$stack.peek()).value;
		RESULT = "String";
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPO ::= 
            {
              String RESULT =null;
		RESULT = "Object";
              CUP$SintaxisLenguajes$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$SintaxisLenguajes$stack.peek()), RESULT);
            }
          return CUP$SintaxisLenguajes$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxisLenguajes$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxisLenguajes$do_action(
    int                        CUP$SintaxisLenguajes$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisLenguajes$parser,
    java.util.Stack            CUP$SintaxisLenguajes$stack,
    int                        CUP$SintaxisLenguajes$top)
    throws java.lang.Exception
    {
              return CUP$SintaxisLenguajes$do_action_part00000000(
                               CUP$SintaxisLenguajes$act_num,
                               CUP$SintaxisLenguajes$parser,
                               CUP$SintaxisLenguajes$stack,
                               CUP$SintaxisLenguajes$top);
    }
}

}
